
# Default values for saas-backend
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: saas-backend
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/limit-rps: "100"
  hosts:
    - host: api.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: saas-backend-tls
      hosts:
        - api.yourdomain.com

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Application configuration
config:
  appName: "SaaS Backend Framework"
  appEnv: "production"
  debug: false
  apiV1Prefix: "/api/v1"
  algorithm: "HS256"
  accessTokenExpireMinutes: 30
  refreshTokenExpireDays: 7
  databasePoolSize: 20
  databaseMaxOverflow: 10
  redisCacheDb: 1
  corsAllowCredentials: true
  bcryptRounds: 12
  passwordMinLength: 8
  sessionTimeoutMinutes: 60
  maxLoginAttempts: 5
  lockoutDurationMinutes: 30
  rateLimitEnabled: true
  rateLimitPerMinute: 60
  fileStorageProvider: "s3"
  awsRegion: "us-east-1"
  smtpHost: "smtp.gmail.com"
  smtpPort: 587
  logLevel: "INFO"
  pypiCheckEnabled: true
  pypiCheckIntervalHours: 24

# Secrets (use external secrets management in production)
secrets:
  secretKey: ""
  databaseUrl: ""
  redisUrl: ""
  celeryBrokerUrl: ""
  celeryResultBackend: ""
  googleClientId: ""
  googleClientSecret: ""
  githubClientId: ""
  githubClientSecret: ""
  microsoftClientId: ""
  microsoftClientSecret: ""
  keycloakClientSecret: ""
  openaiApiKey: ""
  awsS3Bucket: ""
  awsAccessKeyId: ""
  awsSecretAccessKey: ""
  smtpUser: ""
  smtpPassword: ""
  smtpFrom: ""
  sentryDsn: ""

# Celery worker configuration
celeryWorker:
  enabled: true
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75

# Celery beat configuration
celeryBeat:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

# Flower (Celery monitoring)
flower:
  enabled: true
  replicaCount: 1
  service:
    type: ClusterIP
    port: 5555
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: flower.yourdomain.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: flower-tls
        hosts:
          - flower.yourdomain.com
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# PostgreSQL (if deploying with the chart)
postgresql:
  enabled: false
  auth:
    username: postgres
    password: postgres
    database: saas_db

# Redis (if deploying with the chart)
redis:
  enabled: false
  auth:
    enabled: false
