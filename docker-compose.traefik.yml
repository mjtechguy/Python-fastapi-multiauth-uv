version: '3.8'

# Traefik Integration Override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.traefik.yml up -d
#
# This file adds Traefik as a reverse proxy with automatic SSL/TLS certificates
# and DNS-based routing for production deployments.
#
# Prerequisites:
# 1. Domain name pointing to your server
# 2. Ports 80 and 443 accessible from the internet
# 3. Valid email for Let's Encrypt
#
# Configuration:
# 1. Copy traefik/.env.example to traefik/.env
# 2. Update DOMAIN and EMAIL in traefik/.env
# 3. Run: docker-compose -f docker-compose.yml -f docker-compose.traefik.yml up -d

services:
  # Traefik - Reverse Proxy with Automatic SSL
  traefik:
    image: traefik:v2.11
    container_name: saas_traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"       # HTTP
      - "443:443"     # HTTPS
      - "8090:8080"   # Traefik Dashboard (change port to avoid conflict with adminer)
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL:-}              # Optional: Cloudflare email for DNS challenge
      - CF_API_KEY=${CF_API_KEY:-}                  # Optional: Cloudflare API key for DNS challenge
    volumes:
      # Traefik configuration
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/dynamic:/dynamic:ro

      # Let's Encrypt certificates storage
      - traefik_certificates:/certificates

      # Docker socket (read-only for security)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      # Enable Traefik for itself
      - "traefik.enable=true"

      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"

      # Basic auth for dashboard (default: admin/changeme)
      # Generate with: echo $(htpasswd -nb admin changeme) | sed -e s/\\$/\\$\\$/g
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$8evjzVMJ$$sZbT7CqVf0TfIVeJJJ0GC."
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service - Add Traefik labels
  api:
    labels:
      # Enable Traefik
      - "traefik.enable=true"

      # HTTP Router
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"

      # Service
      - "traefik.http.services.api.loadbalancer.server.port=8000"

      # Middleware - CORS and Rate Limiting
      - "traefik.http.routers.api.middlewares=api-headers,api-ratelimit"

      # Security Headers
      - "traefik.http.middlewares.api-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.Referrer-Policy=strict-origin-when-cross-origin"

      # Rate Limiting (100 requests per second, burst of 50)
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=50"

      # HTTP to HTTPS redirect
      - "traefik.http.routers.api-http.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.api-http.entrypoints=web"
      - "traefik.http.routers.api-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    ports: []  # Remove port exposure, Traefik handles routing
    environment:
      # Update CORS for production domain
      - CORS_ORIGINS=https://${DOMAIN:-localhost},https://api.${DOMAIN:-localhost},https://www.${DOMAIN:-localhost}

  # Adminer - Add Traefik labels (optional, for database management)
  adminer:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"
      - "traefik.http.routers.adminer.middlewares=auth"  # Requires basic auth
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    ports: []  # Remove port exposure

  # MinIO Console - Add Traefik labels
  minio:
    labels:
      # API endpoint
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`s3.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls=true"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"

      # Console endpoint
      - "traefik.http.routers.minio-console.rule=Host(`minio.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls=true"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
    ports: []  # Remove port exposure
    environment:
      - MINIO_SERVER_URL=https://s3.${DOMAIN:-localhost}
      - MINIO_BROWSER_REDIRECT_URL=https://minio.${DOMAIN:-localhost}

  # Flower - Add Traefik labels (optional, for Celery monitoring)
  flower:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`flower.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls=true"
      - "traefik.http.routers.flower.tls.certresolver=letsencrypt"
      - "traefik.http.routers.flower.middlewares=auth"  # Requires basic auth
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
    ports: []  # Remove port exposure

volumes:
  traefik_certificates:
    driver: local
