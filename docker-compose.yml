version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: saas_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: saas_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saas_network

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: saas_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - saas_network

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: saas_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saas_network

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: saas_minio
    ports:
      - "9000:9000"      # API
      - "9001:9001"      # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - saas_network

  # MinIO Client - Create default bucket
  minio_client:
    image: minio/mc:latest
    container_name: saas_minio_client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/saas-uploads --ignore-existing;
      mc anonymous set download myminio/saas-uploads;
      exit 0;
      "
    networks:
      - saas_network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_api
    environment:
      # Application
      - APP_NAME=SaaS Backend Framework
      - APP_ENV=development
      - DEBUG=true
      - API_V1_PREFIX=/api/v1
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-characters-long

      # Database
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/saas_db
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=10

      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_DB=1

      # Celery
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3

      # File Storage - MinIO (S3-compatible)
      - FILE_STORAGE_PROVIDER=s3
      - MAX_FILE_SIZE_MB=50
      - AWS_S3_BUCKET=saas-uploads
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://minio:9000

      # Security
      - BCRYPT_ROUNDS=12
      - PASSWORD_MIN_LENGTH=8
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7

      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60

      # CORS
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000

    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - saas_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_celery_worker
    environment:
      # Application
      - APP_NAME=SaaS Backend Framework
      - APP_ENV=development
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-characters-long

      # Database
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/saas_db
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=10

      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_DB=1

      # Celery
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3

      # File Storage
      - FILE_STORAGE_PROVIDER=s3
      - MAX_FILE_SIZE_MB=50
      - AWS_S3_BUCKET=saas-uploads
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://minio:9000

    volumes:
      - .:/app
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info
    networks:
      - saas_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_celery_beat
    environment:
      # Application
      - APP_NAME=SaaS Backend Framework
      - APP_ENV=development
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-characters-long

      # Database
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/saas_db
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=10

      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_DB=1

      # Celery
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3

    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app beat --loglevel=info
    networks:
      - saas_network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    command: celery -A app.tasks.celery_app flower --port=5555
    networks:
      - saas_network

networks:
  saas_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  uploads:
